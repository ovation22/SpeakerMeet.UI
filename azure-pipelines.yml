# Node.js with React
# Build a Node.js project that uses React.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  - master

pool:
  vmImage: 'ubuntu-latest'

variables:
  npm_cache_path: $(Build.SourcesDirectory)/node_modules
  npm_cache_key: npm | $(Agent.OS) | package-lock.json
  branchName: $(Build.SourceBranchName)
  projectKey: $(SonarQubeProjectKey)
  projectName:  $(SonarQubeProjectName)
  sonarQubeServerUrl: $(SonarQubeServerUrl)
  sonarQubeToken: $(SonarQubeToken)
  isMaster: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]

steps:
  - task: replacetokens@3
    inputs:
      targetFiles: 'sonar-project.js'
      encoding: 'auto'
      writeBOM: true
      actionOnMissing: 'warn'
      keepToken: false
      tokenPrefix: '#{'
      tokenSuffix: '}#'
      useLegacyPattern: false
      enableTelemetry: true

  - task: Cache@2
    displayName: Cache NPM packages
    inputs:
      key: $(npm_cache_key)
      restoreKeys: $(npm_cache_key)
      path: $(npm_cache_path)
      cacheHitVar: CACHE_RESTORED

  - script: npm install --quiet
    displayName: 'Install NPM dependencies'
    condition: ne(variables.CACHE_RESTORED, 'true')

  - task: Npm@1
    displayName: Run Lint
    inputs:
      command: custom
      customCommand: 'run lint'

  - task: Npm@1
    displayName: Run Unit Tests
    inputs:
      command: custom
      customCommand: 'run test:ci'

  - task: Npm@1
    displayName: 'Publish Quality Gate Result'
    inputs:
      command: 'custom'
      workingDir: '$(Build.SourcesDirectory)'
      customCommand: 'run sonar'
    condition: eq(variables.isMaster, true)

  - task: PublishTestResults@2
    displayName: Publish test results
    inputs:
      testResultsFiles: 'coverage/jest-junit/junit.xml'
      failTaskOnFailedTests: true

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage report'
    inputs:
      codeCoverageTool: 'cobertura'
      summaryFileLocation: '$(Build.SourcesDirectory)/coverage/cobertura-coverage.xml'

  - script: npm audit --json > audit.json & exit 0
    displayName: 'Audit Packages'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: audit_results'
    inputs:
      PathtoPublish: 'audit.json'
      ArtifactName: 'audit_results'

  - task: Npm@1
    displayName: Build App
    inputs:
      command: custom
      customCommand: 'run build'

  - task: PublishPipelineArtifact@1
    displayName: 'Publish Artifact: build'
    inputs:
      targetPath: $(Build.SourcesDirectory)
      artifactName: 'SpeakerMeet.UI'
